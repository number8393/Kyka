import yfinance as yf
import requests
import time
from datetime import datetime

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TG_TOKEN = "8094752756:AAFUdZn4XFlHiZOtV-TXzMOhYFlXKCFVoEs"
TG_CHAT_ID = "5556108366"

# –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã (tickers –Ω–∞ Yahoo Finance)
PAIRS = {
    "EUR/USD": "EURUSD=X",
    "GBP/USD": "GBPUSD=X",
    "USD/JPY": "JPY=X",
    "USD/CHF": "CHF=X",
    "AUD/USD": "AUDUSD=X",
    "NZD/USD": "NZDUSD=X",
    "USD/CAD": "CAD=X"
}

def send_message(message):
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    payload = {
        "chat_id": TG_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

def analyze_and_send():
    for name, ticker in PAIRS.items():
        try:
            data = yf.download(ticker, period="1d", interval="5m")
            if data.empty:
                send_message(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {name}")
                continue

            last = data.iloc[-1]
            close_price = last['Close']
            open_price = last['Open']

            signal = ""
            confidence = 0

            if close_price > open_price:
                signal = "üìà –ü–æ–∫—É–ø–∫–∞"
                confidence = round((close_price - open_price) / open_price * 100, 2)
            elif close_price < open_price:
                signal = "üìâ –ü—Ä–æ–¥–∞–∂–∞"
                confidence = round((open_price - close_price) / open_price * 100, 2)
            else:
                signal = "‚è∏ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞"
                confidence = 0

            if confidence > 0.1:
                send_message(
                    f"üîî {name}\n"
                    f"{signal}\n"
                    f"–¶–µ–Ω–∞: {close_price:.5f}\n"
                    f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )

        except Exception as e:
            send_message(f"‚ùå –û—à–∏–±–∫–∞ {name}: {e}")

# –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
while True:
    analyze_and_send()
    time.sleep(30)
